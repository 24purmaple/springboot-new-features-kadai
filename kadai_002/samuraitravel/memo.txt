
ビュー→ふぉーむ→コントローラ→サービス→リポジトリ→エンティティ→データベース→エンティティ→リポジトリ→コントローラ→ビュー


1.ビュー（View）: ユーザーインターフェースを構築し、ユーザーに情報を表示します。ビューはHTML、CSS、JavaScriptなどのフロントエンド技術を使用して構築され、ユーザーとの対話を可能にします。
2.コントローラ（Controller）: ユーザーからのリクエストを受け取り、適切なサービスを呼び出してビジネスロジックを実行します。コントローラはサービスの結果をビューに渡し、ユーザーに適切なレスポンスを返します。
3.サービス（Service）: アプリケーションのビジネスロジックを実装し、リポジトリを介してデータベースにアクセスします。サービスはコントローラから呼び出され、要求された操作を実行します。
4.リポジトリ（Repository）: データベースとのやり取りを担当し、エンティティを操作します。リポジトリはサービスから呼び出され、データベースの読み書きを実行します。
5.エンティティ（Entity）: データベースのテーブルの行に対応し、アプリケーション内でのデータの表現です。エンティティはリポジトリやサービスから操作され、データベースとのやり取りを行います。
6.データベース（Database）: データの永続的な格納と管理を担当します。リポジトリがデータベースとの通信を管理し、エンティティの操作に応じてデータを更新します。
7.エンティティ（Entity）: データベースから取得されたデータを表し、アプリケーション内でのデータの表現です。リポジトリによって操作され、必要に応じてデータベースに反映されます。
8.リポジトリ（Repository）: データベースとのやり取りを担当し、エンティティを操作します。リポジトリはコントローラから呼び出され、データベースの読み書きを実行します。
9.コントローラ（Controller）: ビューとのやり取りを担当し、ユーザーからのリクエストを処理します。コントローラはサービスを呼び出してビジネスロジックを実行し、結果をビューに渡してユーザーに表示します。
10.ビュー（View）: ユーザーに情報を表示し、ユーザーとの対話を可能にします。ビューはコントローラから受け取ったデータを表示し、ユーザーの操作を受け付けます。

SQLのPRIMARY KEY（主キー）とFOREIGN KEY（外部キー）の関係
	鍵（主キー）と鍵穴（外部キー）　鍵は1本　鍵穴は複数（の対応するテーブルを）用意できる
	
	loqj hsji boam wakg
＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿	
public class AdminHouseController {
	private final HouseRepository houseRepository;
	
	public AdminHouseController(HouseRepository houseRepository) {
		this.houseRepository = houseRepository;
	}
と
@Autowired
private final HouseRepository houseRepository;
は共にリポジトリのインスタンス化、フィールド定義で同義